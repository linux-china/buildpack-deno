#!/usr/bin/env bash
set -eo pipefail

get_deno_version() {
  runtime=$(head -n 1 runtime.txt)
  deno_version=${runtime//deno-/}
  if ! [[ $deno_version == v* ]]; then
    deno_version="v${deno_version}"
  fi
  echo "$deno_version"
}
echo "---> Deno Buildpack"

# GET ARGS
layersdir=$1

# get Deno version, url and install dir
deno_version=$(get_deno_version)
deno_url="https://deno.land/x/install/install.sh?v=${deno_version}"
deno_layer_dir="$layersdir"/deno
export DENO_INSTALL="$deno_layer_dir"

# Deno cache check
if [[ -f ${deno_layer_dir}.toml ]]; then
  if grep -q "$deno_version" "${deno_layer_dir}.toml"; then
    cached_deno_url="${deno_url}"
  fi
fi

# Install Deno
if [[ ${deno_url} != "${cached_deno_url}" ]]; then
  echo "---> Downloading and extracting Deno: ${deno_version}"
  rm -rf "$deno_layer_dir"
  mkdir -p "$deno_layer_dir"
  cat >"${deno_layer_dir}.toml" <<EOF
launch = true
build = true
cache = true
[metadata]
version = "${deno_version}"
url = "${deno_url}"
EOF

  # install Deno
  echo "---> Installing Deno: ${deno_version}"
  curl -fsSL "$deno_url" | sh -s "$deno_version"

fi

# setup DENO_DIR for cache
deno_dir_layer="$layersdir"/deno_dir
export DENO_DIR="$deno_dir_layer"

if ! [[ -f ${deno_dir_layer}.toml ]]; then
  mkdir -p "$deno_dir_layer"
  echo "---> Creating Deno Cache: ${deno_version}"
  cat >"${deno_dir_layer}.toml" <<EOF
launch = true
build = true
cache = true
EOF

fi

# setup env
mkdir -p "${deno_layer_dir}"/profile.d
cat >"${deno_layer_dir}/profile.d/deno.sh" <<EOF
export DENO_DIR=${deno_dir_layer}
EOF

# MAKE DENO AVAILABLE TO THIS SCRIPT
export PATH="$deno_layer_dir"/bin:$PATH

# download dependencies
if [ -f Procfile ]; then
  cat Procfile | grep -E '^(release):' | while read -r line || [[ -n $line ]]; do
    command=${line//release:/}
    echo "---> Executing: ${command}"
    eval "${command}"
  done
fi

#echo 'processes = [{ type = "web", command = "deno run -A app.ts"}]' >"$layersdir/launch.toml"
